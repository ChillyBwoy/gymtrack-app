schema {
  query: Query
}

enum CategoryColor {
  NONE
  BLUE
  GREEN
  INDIGO
  ORANGE
  PINK
  PURPLE
  RED
  TEAL
  YELLOW
  GRAY
  GRAY2
  GRAY3
  GRAY4
  GRAY5
  GRAY6
}

type CategoryType implements Node {
  id: ID!
  name: String!
  color: CategoryColor!
  exercises(before: String, after: String, first: Int, last: Int): ExerciseTypeConnection!
}

type CategoryTypeConnection {
  pageInfo: PageInfo!
  edges: [CategoryTypeEdge]!
  totalCount: Int
}

type CategoryTypeEdge {
  node: CategoryType
  cursor: String!
}

scalar Date

scalar DateTime

type DjangoDebug {
  sql: [DjangoDebugSQL]
}

type DjangoDebugSQL {
  vendor: String!
  alias: String!
  sql: String
  duration: Float!
  rawSql: String!
  params: String!
  startTime: Float!
  stopTime: Float!
  isSlow: Boolean!
  isSelect: Boolean!
  transId: String
  transStatus: String
  isoLevel: String
  encoding: String
}

type EffortType implements Node {
  id: ID!
  workoutExercise: WorkoutExerciseType!
  createdAt: DateTime!
  value: Float!
  repeats: Int!
  failure: Boolean!
  exercise: ExerciseType
}

type EffortTypeConnection {
  pageInfo: PageInfo!
  edges: [EffortTypeEdge]!
  totalCount: Int
}

type EffortTypeEdge {
  node: EffortType
  cursor: String!
}

type ExerciseType implements Node {
  id: ID!
  name: String!
  unit: ExerciseUnit!
  categories(before: String, after: String, first: Int, last: Int): CategoryTypeConnection!
  workoutSet(before: String, after: String, first: Int, last: Int, date_Gt: Date, date_Gte: Date, date_Lt: Date, date_Lte: Date, date: Date): WorkoutTypeConnection!
  workoutexerciseSet(before: String, after: String, first: Int, last: Int): WorkoutExerciseTypeConnection!
  efforts(before: String, after: String, first: Int, last: Int): EffortTypeConnection
}

type ExerciseTypeConnection {
  pageInfo: PageInfo!
  edges: [ExerciseTypeEdge]!
  totalCount: Int
}

type ExerciseTypeEdge {
  node: ExerciseType
  cursor: String!
}

enum ExerciseUnit {
  NONE
  WEIGHT
  TIME
  STEP
  DISTANCE
  CHECK
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  workout(id: ID!): WorkoutType
  workouts(before: String, after: String, first: Int, last: Int, date_Gt: Date, date_Gte: Date, date_Lt: Date, date_Lte: Date, date: Date): WorkoutTypeConnection
  exercise(id: ID!): ExerciseType
  exercises(before: String, after: String, first: Int, last: Int): ExerciseTypeConnection
  effort(id: ID!): EffortType
  efforts(before: String, after: String, first: Int, last: Int, createdAt_Gt: DateTime, createdAt_Gte: DateTime, createdAt_Lt: DateTime, createdAt_Lte: DateTime, createdAt: DateTime, createdAt_Date_Gt: DateTime, createdAt_Date_Gte: DateTime, createdAt_Date_Lt: DateTime, createdAt_Date_Lte: DateTime, createdAt_Date: DateTime): EffortTypeConnection
  lastWorkout: WorkoutType
  _debug: DjangoDebug
}

type WorkoutExerciseType implements Node {
  id: ID!
  workout: WorkoutType!
  exercise: ExerciseType!
  efforts(before: String, after: String, first: Int, last: Int, createdAt_Gt: DateTime, createdAt_Gte: DateTime, createdAt_Lt: DateTime, createdAt_Lte: DateTime, createdAt: DateTime, createdAt_Date_Gt: DateTime, createdAt_Date_Gte: DateTime, createdAt_Date_Lt: DateTime, createdAt_Date_Lte: DateTime, createdAt_Date: DateTime): EffortTypeConnection!
}

type WorkoutExerciseTypeConnection {
  pageInfo: PageInfo!
  edges: [WorkoutExerciseTypeEdge]!
  totalCount: Int
}

type WorkoutExerciseTypeEdge {
  node: WorkoutExerciseType
  cursor: String!
}

type WorkoutType implements Node {
  id: ID!
  date: Date!
  exercises(before: String, after: String, first: Int, last: Int): ExerciseTypeConnection!
  workoutexercises(before: String, after: String, first: Int, last: Int): WorkoutExerciseTypeConnection!
  efforts(before: String, after: String, first: Int, last: Int): EffortTypeConnection
}

type WorkoutTypeConnection {
  pageInfo: PageInfo!
  edges: [WorkoutTypeEdge]!
  totalCount: Int
}

type WorkoutTypeEdge {
  node: WorkoutType
  cursor: String!
}

